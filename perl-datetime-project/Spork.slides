----------------------------------------------
images_directory: /home/autarch/presentations/perl-datetime-project/images
file_base: /home/autarch/presentations/perl-datetime-project/
logo_image: clocks-small.jpg
banner_bgcolor: #E9E6BB
presentation_topic: Perl DateTime Project
presentation_title: Perl DateTime Project
presentation_place: Toronto, Ontario
presentation_date: June 28, 2005
----------------------------------------------

{image: http://www.poc.it/stories/desktop/desk_1024/shark1024.jpg}

== Wear Your Name Tag to the Cruise

* Or else!

----------------------------------------------

== Choose Your Own Adventure

{image: http://www.gamebooks.org/gallery/cyoa001f.jpg}

* The presenter asks you what you want to see for the last part of the talk, you will ...
+** A) listen to him blather on
*** turn to slide 76 and go to sleep
+** B) come up with programming problems you want to see solved
*** turn to slide 23 and write down the problem you want to see solved
+** C) go on a rampage of destruction, Johnny Depp style
*** turn to slide 55, go to your room, and start chucking stuff out the window

----------------------------------------------

== The Problem(s)

* Datetime manipulation appears simple
** but has lots of tricky corner cases
+* CPAN was full of datetime-related modules
** none of them were complete
** all of them had incompatible APIs
+* Some problems hadn't been solved at all
** notably handling time zones

----------------------------------------------

== The Solution

* *WRITE MORE CODE!*
+* Better yet, get lots of people to write more code
+* Solve *all* datetime problems
** create good, usable APIs
** many small(-ish) modules which work together
+* Cat herding

----------------------------------------------

== Types of Modules

* Core
** |DateTime.pm|
+** |DateTime::TimeZone| - the Olson database in Perl
+** |DateTime::Locale| - ICU-based localization
+** |DateTime::{Set,Span,SpanSet}|
* Parsing and formatting
** |DateTime::Format::ICal|
** |DateTime::Format::MySQL|
** |DateTime::Format::HTTP|
** many more


----------------------------------------------

== Types of Modules

* Events and recurrences
** helpers for generates sets or finding a single event
** |DateTime::Event::Recurrence|
** |DateTime::Event::Lunar|
** |DateTime::Event::Easter|
* Non-Gregorian calendars
** Chinese
** Julian
** Hebrew

----------------------------------------------

== The calendar

* Gregorian calendar
** arithmetical, solar calendar
** only based on the earth's rotation around the sun
** ignores the moon
+* Created in the 16th century
+* Basically the same as the previous Christian calendar (Julian)
** includes a crucial patch for leap year calculation
+* The current world standard (as of the early 20th century)

----------------------------------------------

== The Gregorian calendar

* 365 days in a regular year, 366 in a leap year
+* Begins on January 1, year 1 - its epoch
+* It does have a year 0
** equivalent to 1 BC(E)
+* May need another leap year adjustment c. 3000
** the earth's rotation around the sun is slowing down

----------------------------------------------

== UTC

* "Coordinated Universal Time", or "Temps Universel CoordineÃ©"
+* Basis for calculating current local time = UTC + time zone offset
+* An international standard based on atomic clocks
+* Before UTC, the length of a second was based on the earth's revolution
** but that is slowing down
+* With atomic clocks, a second's length never changes


----------------------------------------------

== Leap Seconds

* My personal nemesis
** they make coding |DateTime.pm| quite difficult
+* As the earth slows down, days grow longer (> 86,400 seconds)
** an occasional leap second syncs rotation and UTC clock

----------------------------------------------

== Time Zones

* Time zones are *geo-political* entities
** they are not "real"
+* Canonical data source: the Olson time zone database
+* Each time zone has several parts
** an offset from UTC in minutes and hours
+** a name - usually contintent or ocean plus city
*** America/Toronto
*** Europe/London
*** some three component names - America/Indiana/Knox
+** Also includes Daylight Saving Time rules
*** when do switches happen
+** a short name for the zone, like EST

----------------------------------------------

== Time Zones (cont)

* The canonical names are the long names!
+* Short names are *not* unique around the world
+* A global app should only use short names for display

----------------------------------------------

== "The" epoch

* Just means the starting date and time for a calendar
** Gregorian epoch is 0001-01-01 00:00:00
** Unix epoch is 1970-01-01 00:00:00 UTC
** Other OS's vary
+* Perl's |time()| uses the OS-native epoch
+* On many OS's, the epoch is a 32-bit signed int
** Unix epochs can range from 1901-12-13 to 2038-01-19

----------------------------------------------

== Epoch Bad

* Epochs times are not portable
+* Epoch times have a limited range
** just wait for the y2.038 bug
** Or try calculatiung a 30 year mortgage starting in 2009
+* The Unix epoch ignores leap seconds in a weird way

----------------------------------------------

== Making a DateTime

* By default, DateTime objects have no time zone
** rather, they're in the "floating" time zone

    my $dt =
        DateTime->new( year => 2005, month => 6, day => 28 );

+* Can specify up to your desired precision.
** unspecified components are "zeroed" out (or "oned" out).

----------------------------------------------

== Make it Speak

* |$dt->year| - 2005
+* |$dt->year_with_secular_era| - 2005AD
** localized
+* |$dt->month_name| - June
** also localized
+* |$dt->day_name| - Tuesday
** again, localized
+* |$dt->ymd| - "2005-06-28"

----------------------------------------------

== Slightly more exotic

* |$dt->quarter| - 2
+* |$dt->nanosecond| - 0
+* |$dt->mjd| - 53549
** not the guy in the second row, "Modified Julian Date"
+* Many, many more read-only accessors

----------------------------------------------

== Modifiers

* |$dt->set( hour => 12 )| or |$dt->set_hour(12)|
+* |$dt->truncate( to => 'day' )|
+* |$dt->add( days => 1 )|

----------------------------------------------

== Time Zones

* You're an obsessive, alienated young man in Taipei
+** you sold your dead father's watch to a Taiwanese woman who's gone to Paris
+** you *need* to know ...
+** _What Time is it There?_

    my $dt = DateTime->now( time_zone => 'Asia/Taipei' );

    print "Taipei: ", $dt->datetime;

    $dt->set_time_zone( 'Europe/Paris' );

    print "Paris: ", $dt->datetime;

* run the script - /what-time-is-it-there/

----------------------------------------------

== Storing and Presenting DateTimes

* *Always*, *always*, *always* store datetimes in UTC
** this makes your life easier
+* For presentation, use the viewer's local time zone

    my $dt = get_datetime_from_database();

    $dt->set_time_zone( $user->time_zone );

    print $dt->datetime;

+* Makes it easy to do calculations on your stored datetimes
** do appointments overlap?
** how long is a meeting?
** how many days vacation?

----------------------------------------------

== Localization

* DateTime::Locale has many locales
** based on the ICU project's data
+* Localization is applied to ...
** month names
** month abbreviations
** day names
** day abbreviations
** era names (BC/AD)
** AM/PM
** default formats (|strftime()|'s |%c|, |%x|, |%X|)
+* Default locale is en_US

----------------------------------------------

== Localization (cont)

* An example:

    my $dt = DateTime->now( locale => 'zh_TW' );
    for my $m ( qw( month_name month_abbr day_name day_abbr
                    era ) )
    {
        print "$m: ", $dt->$m;
    }

    for my $f ( qw( %p %c %x %X ) )
    {
        print "$f: ", $dt->strftime($f);
    }

* run the script - /zh_TW/

----------------------------------------------

== Math

* How many days from now until X?

.hilite
my $today = DateTime->today( time_zone => 'floating' );
my $oscon = DateTime->new( year => 2005, month => 8, day => 3 );

my $delta = $oscon->delta_days($today);

print $delta->delta_days;

+
                    rrrrrrrrrr 4
              rrrrrrrrrr 6
.hilite

+* This part of the API sucks
+* Sorry
** hindsight
** 20/20

+* run the script - /delta-days-oscon/

----------------------------------------------

== Math (cont)

* What day is it 10 days from now?

    my $dt = DateTime->today;
    $dt->add( days => 10 );

    print $dt->date;

* run the script - /10-days-out/

----------------------------------------------

== Chinese Valentine's Day

* Seventh day of the seventh lunar month

    my $today_zh = DateTime::Calendar::Chinese->now();
    $today_zh->set( month => 7, day => 7 );
    my $dt = DateTime->from_object( object => $today_zh );

    print $dt->date;

* run the script - /chinese-valentine/
+* If I were a good husband, I would remember this

----------------------------------------------

== THE END OF THE WORLD

* Mayan calendar ends at the end of the 13th /baktun/
** /baktun/ == 144,000 days
+* Baktuns occur in a 13-baktun cycle

    my $mayan = DateTime::Calendar::Mayan->new( baktun => 13 );
    my $dt = DateTime->from_object( object => $mayan );

    print $dt->date;

* run the script - /mayan/

----------------------------------------------

== Recurrences

* Recurrences are a type of set
+* Common ones
** every day
** second Wednesday of each month
** every other Friday
** Monday through Friday, ever week - the work week

----------------------------------------------

== Recurrences (cont)

* Every day

.hilite
my $recur =
    DateTime::Event::Recurrence->daily;

my $dt = DateTime->today;
while ( $dt = $recur->next($dt) )
{
    last if $dt->month == 8;
    print $dt->date;
}

                      rrrrrrrr 5
    rrrrrrrrrrrrrrrrrrrrrrrr 7
.hilite

* run the script - /every-day/

----------------------------------------------

== Recurrences (cont)

* The work week (M-F)

.hilite
my $recur =
    DateTime::Event::Recurrence->weekly( days => [ 1 .. 5 ] );

my $end =
    DateTime->new( year => 2005, month => 8 )->subtract( days => 1 );
my @list =
    $recur->as_list( start => DateTime->today, end => $end );

for my $dt (@list)
{
    print "\n" if $dt->day_of_week == 1;
    print sprintf( "%-9s - %s\n", $dt->day_name, $dt->date );
}

                                         bbbbbbbbbbbbbbbbbb 2
            rrrrrrrr 7
.hilite

----------------------------------------------

== Recurrences with Set Math

* Take some time off:

.hilite
my $recur =
    DateTime::Event::Recurrence->weekly( days => [ 1 .. 5 ] );

my $days_off =
    DateTime::Set->from_datetimes
        ( dates => [ map { DateTime->new(%$_) }
                     { year => 2005, month => 7, day => 12 },
                     { year => 2005, month => 7, day => 13 } ] );

$recur = $recur->complement($days_off);


   bbbbbb  1
   bbbbbbbbb 4
+
rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr 10
.hilite

* run the script - /days-off/

+* Flavio Glock is my hero
** Flavio wrote all the hard set math parts

----------------------------------------------

== Parsing & Formatting

* HTTP dates:

    print DateTime::Format::HTTP->format_datetime
              ( DateTime->today );
    print DateTime::Format::HTTP->parse_datetime
              ( 'Tue, 28 Jun 2005 13:52:00 GMT' );

* run the script - /http/

----------------------------------------------

== Resources

* website: datetime.perl.org
* mailing list: datetime@perl.org

----------------------------------------------
