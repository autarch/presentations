----
images_directory: /home/autarch/presentations/jsan/images
banner_bgcolor: #006400
presentation_topic: JSAN, AJAX, and Perl
presentation_title: JSAN, AJAX, and Perl
presentation_place: YAPC::Asia, Tokyo, Japan
presentation_date: March 29, 2006
----

{image: http://images.amazon.com/images/P/B00008OE4V.01._PE10_SCLZZZZZZZ_.jpg}

=== JavaScript Is the New Sex 

* All the cool kids are using it
* 最先端の人たちはみんな使ってる
* If your website does not use AJAX you are *DOOMED* to Web 1.0 obscurity
* AJAXを使わないサイトはWeb 1.0とともに暗闇にのまれるだろう
* Perl is dead!
* Perlは死んだ！

----

{image: http://i.xanga.com/bjs1023/t/skull.jpg}

=== Grave Robbing | 墓荒らし・・・

* But Perl did have one or two good ideas
* ただPerlにも少し残すべきアイデアがあった
* And one of its best was CPAN
* そのうちのひとつがCPAN

----

{image: http://www.lancashire.gov.uk/corporate/news/press_releases/2003/04/10/001_800x1000.jpg}

=== Finding Reusable JavaScript is Painful | 汎用性のあるJavascriptの入手は困難

* Besides just a Google search, options were limited
* Googleで探す以外の手段は少なかった
* Terrible sites like HotScripts
* HotScriptsのような粗悪なサイト
** Lots of bad code
** 粗悪なコード
** No documentation standards (and often no docs)
** ドキュメント規格もなし
** A lot of commercially licensed code
** 商用ライセンスのみのコード

----

{image: http://www.lancashire.gov.uk/corporate/news/press_releases/2003/04/10/001_800x1000.jpg}

=== Finding Reusable JavaScript is Painful | 汎用性のあるJavascriptの入手は困難

* There is good code out there ...
* しかし他の場所には良いコードもある
** ... but it is hard to find, and mostly linked from someone's blog
** ただ入手が困難で、誰かのブログからしかたどれなかったりする

----

{image: http://www.openjsan.org/images/logo/jsan-logo-rhino.png}

=== Enter JSAN (www.openjsan.org)

* The obvious idea is CPAN for JS, JSAN
* 明白なのはJS用のCPANを作る事：それがJSAN
** http://www.openjsan.org/
* Casey West started this project mid-2005
* Casey Westが２００５年半ばにプロジェクトを開始

----

{image: http://www.openjsan.org/images/logo/jsan-logo-rhino.png}

=== Enter JSAN (www.openjsan.org)

* Central repository for JS libraries, with some expected standards:
* 一定の規格でJSライブラリを保管する:
** Tests
** テスト
** API docs in POD
** POD書式のAPIドキュメンテーション
** Changes file, README, etc.
** Changesファイル、README、その他

----

{image: http://www.openjsan.org/images/logo/jsan-logo-rhino.png}

=== Enter JSAN (www.openjsan.org)

* One big problem ...
* ただひとつ問題が・・・
** ... JavaScript has no facility for loading libraries!
** ... Javascriptにはライブラリを読み込む仕組みが存在しない！
* Nothing like Perl's |use| or |require|
* Perlの |use| や |require| のようなものは存在しない

----

{image: http://www.openjsan.org/images/logo/jsan-logo-rhino.png}

=== Enter JSAN (www.openjsan.org)

* Loading of multiple libraries can only be done from an HTML file:
* 複数のライブラリを読み込むにはHTMLに埋め込むしかない：

  <script type="text/javascript" src="/js/Lib/Foo.js" />
  <script type="text/javascript" src="/js/Lib/Bar.js" />

----

{image: http://www.openjsan.org/images/logo/jsan-logo-rhino.png}

=== The JSAN.js Library Loader | JSAN.jsライブラリローダー

* Actually, there is a way to load libraries from a script file
* スクリプトからライブラリを読み込む方法もある
** several ways, in fact
** 実は何個かある

----

{image: http://www.openjsan.org/images/logo/jsan-logo-rhino.png}

=== The JSAN.js Library Loader | JSAN.jsライブラリローダー

* It is possible to use XMLHttpRequest to load a script from inside a script
* XMLHttpRequestを使って、スクリプト内から他のスクリプトを読み込む

----

{image: http://www.openjsan.org/images/logo/jsan-logo-rhino.png}

=== The JSAN.js Library Loader | JSAN.jsライブラリローダー

* JSAN.js does this for you
* JSAN.jsはこの方法で読み込む
** and provides Perl-style "exporting" as well
** また、Perl方式のエクスポートも可能
+* In your HTML:

.hilite
  <script type="text/javascript" src="/js/JSAN.js" />
  <script type="text/javascript">
    JSAN.addRepository('/js');
    JSAN.use('Lib.Foo');
    JSAN.use('Lib.Bar');
  </script>
+
  g+ 1
+
  g+ 3
+
  g+ 4
  g+ 5
+
              ggggggg  4
              ggggggg  5
.hilite

----

{image: http://upload.wikimedia.org/wikipedia/en/4/4c/Biggus.jpg}

=== Caveat | 留意点

* There's always a caveat
* 注意しなくてはいけない点はもちろん存在する
* Some browsers (Firefox, IE sometimes) do not respect caching headers when using XHR
* ブラウザによってはキャッシュ用ヘッダーを無視する場合がある

----

{image: http://upload.wikimedia.org/wikipedia/en/4/4c/Biggus.jpg}

=== Caveat | 留意点

* If you load 50k worth of JS libraries on each page ...
* もし50k分のJSライブラリをそれぞれのページで読み込んだ場合・・・
+** ... 100,000 page view per day
** ... 100,000 PV/日
+** ... 500MB per day
** ... 500MB/日
+** ... approximately 15GB per month!
** ... 一月で約15GB!!
* Now do the math for 1,000,000 or 100,000,000 page views per day
* もしこれが１００万、１億PVあったらどうなるか？

----

{image: http://www.star-e.com/company/factory-work.jpg}

=== Workarounds | 回避方法

* For dynamic sites, use |JSAN::ServerSide| from CPAN
* 動的なサイトでは、 |JSAN::ServerSide| が使える
* Reads a JSAN-using JavaScript library ...
* JSANを使用したJavascriptライブラリを読み込んで・・・
** ... analyzes dependencies ...
** ... 依存関係を解析 ...
** ... spits out a bunch of URIs to load libraries in the right order
** ... 正しい順番で読み込むライブラリのURIを作成
** ... but does not support exporting (yet)
** ... ただし、まだエクスポートは実装されていない

----

{image: http://www.star-e.com/company/factory-work.jpg}

=== Workarounds | 回避方法

* In your code:

  my $js =
      JSAN::ServerSide->new
          ( uri_prefix => '/path/to/js/via/web',
            fs_prefix  => '/usr/local/js' );

  $js->add('HTTP.Request');
  $js->add('My.Class');

----

{image: http://www.star-e.com/company/factory-work.jpg}

=== Workarounds | 回避方法

* When generating HTML:

.hilite
  <script type="text/javascript">
    var JSAN = {};
    JSAN.use = function () {};
  </script>
  % for my $uri ( $js->uris() ) {
  <script type="text/javascript" src="<% $uri %>" />
  % }

+
    ggggggggggggg 2
    ggggggggggggggggggggggggg 3
.hilite

----

{image: http://www.star-e.com/company/factory-work.jpg}

=== Another Workaround | その他の回避方法

* Just do it by hand
* 手動でやってしまう
* Analyze dependencies by looking at file
* ファイルを見て依存関係を解析する

----

{image: http://www.star-e.com/company/factory-work.jpg}

=== Another Workaround | その他の回避方法

* Mock out JSAN.js
* ハリボテのJSAN.jsを宣言しておく

  <script type="text/javascript">
    var JSAN = {};
    JSAN.use = function () {};
  </script>

----

{image: http://www.star-e.com/company/factory-work.jpg}

=== Another Workaround | その他の回避方法

* Load libraries in correct order
* ライブラリを正しい順番で読み込む

  <script type="text/javascript" src="/js/Lib/Foo.js" />
  <script type="text/javascript" src="/js/Lib/PrereqForBar.js" />
  <script type="text/javascript" src="/js/Lib/Bar.js" />

* |JSAN.js| and |JSAN::ServerSide| are always optional
* |JSAN.js| と |JSAN::ServerSide| は常に任意

----

=== What's on JSAN? | JSANには何があるの？

* Test.Simple
** JS port of Perl's |Test::Simple|, |Test::More|, and |Test::Harness|
** JSで実装されたPerlの|Test::Simple|, |Test::More|,それに|Test::Harness|

----

=== Test.More

.hilite
  <html>
  <head>
   <script type="text/javascript" src="lib/JSAN.js" />
   <script type="text/javascript">
    JSAN.addRepository("lib", "../lib");
    JSAN.use("Test.More");
   </script>
  </head>
  <body>

   <pre style="white-space: pre" id="test">
    <script type="text/javascript">
     plan({ tests: 2 });

     JSAN.use("DOM.Ready");
     DOM.Ready._clearTimer();

     is( typeof DOM.Ready, "object", "namespace exists" );
     ok( DOM.Ready.VERSION, "found library VERSION" );
    </script>
   </pre>

  </body>
  </html>
+
   g+ 3
    g+ 5
    g+ 6
+
     g+ 13
+
     g+ 18
     g+ 19

----

=== Test.Harness

  <html>
  <head>
   <script type="text/javascript" src="lib/JSAN.js" />
  </head>
  <body>

   <script type="text/javascript">
     JSAN.use('Test.Harness.Browser');

     var t = new Test.Harness.Browser();

     t.runTests(
       "constructor.t.html",
       "ready.t.html",
       "run_callbacks.t.html"
     );
   </script>

  </body>
  </html>

----

=== DOM.Events

* Attach events to any DOM element.
* 全てのDOM要素にイベントを関連づける
** cross-platform
** クロスプラットフォーム
** memory-leak free - events on IE are notorious for leaking
** メモリーリークがない - IEでのイベントはメモリーリークが起こる事で有名
** stack multiple listener callbacks on the same event
** 複数のリスナーを同一イベントに関連づける
** a nice way to handle the need for multiple window.onLoad events
** 複数の処理をwindow.onLoadイベントに関連づける良い方法

----

=== DOM.Events

* Example ...

  DOM.Events.addListener
      ( window, "load", AdServer.RandomAnnoyingPopupDiv );

  var divs = document.getElementsByTagName("div");
  for ( var i = 0; i < divs.length; i++ ) {
    DOM.Events.addListener( divs[i], "click", Effect.Bounce );
  }

----

=== DOM.Ready

* Setup callbacks to be executed when an element is available
* DOM要素の準備が整ったらコールバックを実行させる
** ... instead of using window.onLoad
** ... window.onLoadを使わずに
* window.onLoad not called until *all* page elements are loaded
* window.onLoadはページ内の全ての要素が読み込まれてからでないと実行されない
** including images
** 画像を含む全ての要素
* Images fetched from another server could take a while
* 外部サーバーから読み込まれている画像は読み込みに時間がかかる可能性がある

----

=== DOM.Ready

* Example:

  DOM.Ready.onIdReady( "div_id", addDivEvent );
+* Use this at the end of the page to run all remaining callbacks:
* ページの最後に残りのコールバックを全て使うにはこちらを使用する：
   ...

   <script type="text/javascript">
     DOM.Ready.runReadyCallbacks();
   </script>
  </body>
  </html>

----

=== Lots more | その他

* Some ports of Perl modules: |File.Basename|
* Perlモジュールからのポート： |File.Basename|
* Widgets: |Widget.SortableTable|, |Widget.TableOfContentGenerator|
* ウィジェット：|Widget.SortableTable|, |Widget.TableOfContentGenerator|
* Effects: |Effect.DropShadow|, |Effect.RoundedCorners|
* 効果：|Effect.DropShadow|, |Effect.RoundedCorners|
* DOM Manipulation & Instrumentation: |DOM.Triggers|, |DOM.Insert|, |Display.Swap|
* DOM操作：|DOM.Triggers|, |DOM.Insert|, |Display.Sawp|
* Cross-platform XHR: |HTTP.Request|
* クロスプラットフォームXHR: |HTTP.Request|
* Class creation: |Class.Setup|, |Class|
* クラス作成： |Class.Setup|, |Class|

----

{image: http://blog.labnotes.org/wp-content/uploads/ajax.jpg}

=== AJAX

* *A*{{synchronous}} *J*{{avascript}} *a*{{nd}} *X*{{ML}}
* Core of AJAX ...
* AJAXのミソ ...
** Server request without page refresh
** ページを読み込まずにサーバーにリクエストを送る

----

{image: http://www.transload.net/~marneysplace/misc/lie.gif}

=== AJAX is a Lie | AJAXという名は嘘

* Can be synchronous
* 非同期でアル必要はない
* No need for XML
* XMLである必要もない
* Doesn't even need Javascript
* Javascriptである必要でもない。
** Similar techniques for Flash, for example
** 似たような技術がFlashにも存在する

----

=== XMLHttpRequest

* Modern browsers have XMLHttpRequest (XHR) in Javascript
* 新しいブラウザはXMLHttRequest(XHR)をJavascriptで実装している
* API for making server request in JS
* JSからサーバーにアクセスするためのAPI
* Mozilla Firefox, modern IE, Opera, Safari, Konqueror

----

{image: http://www.seismo.unr.edu/ftp/pub/louie/class/100/earth-core.GIF}

== Core of AJAX | AJAXの基本

* Use XHR to send an HTTP request to the server
* XHRを使用してサーバーにHTTPリクエストを送信
* Server can return anything ...
* サーバーはなにを返してもいい
** XML
** HTML
** Javascript
** JSON (Javascript Object Notation)
* Use DHTML techniques to update page based on server response
* サーバーからの返答をDHTMLで処理してページをアップデート

----

{image: http://www.channel4.com/entertainment/tv/microsites/I/itcrowd/images/moss-profile.jpg}

=== Why it is cool | なぜカッコ良いのか

* No page reloads
* 再読み込み不要
* Use it with timers for automatic updates
* タイマーと使用して自動アップデート
* More desktop-like web applications
* デスクトップのようなウェブアプリケーション

----

{image: http://www.meredy.com/lisrobot.jpg}

=== Danger, Will Robinson! | 警告！

* Breaks the back button
* 「戻る」ボタンが使えなくなる
* Can defy user expectations
* ユーザーの期待する動作を裏切るかもしれない
** Users expect a page reload when they hit a button
** ボタンをクリックすると、ページが読み込まれるのを期待しているかもしれない
* A whole new way of doing web apps
* 全く新しいウェブアプリケーションの構築法
** Not as well explored, lacking standards for UI design
** まだ枯れていない。UIデザインの規格が存在しない

----

{image: http://static.flickr.com/26/60097639_c00d822480_d.jpg}

=== Socialtext Example | Socialtextでの用例

.html
<ul>
 <li><a href="http://www.socialtext.net/exchange/">http://www.socialtext.net/exchange/</a></li>
</ul>
.html

----

{image: http://static.flickr.com/26/60097639_c00d822480_d.jpg}

=== Socialtext Example | Socialtextでの用例

* Side box content is loaded if box is opened
* Content is just an HTML blob:

  <div class="box_item">
      <a title="Attention"
         href="index.cgi?attention">Attention</a>
  </div>

  <div class="box_item">
      <a title="Best Practices"
         href="index.cgi?best_practices">Best Practices</a>
  </div>


----

{image: http://static.flickr.com/26/60097639_c00d822480_d.jpg}

=== Socialtext Example | Socialtextでの用例

* Uses normal DHTML to change the page:

  content_div.innerHTML = response;

----

{image: http://www.lay-lo.com/graff/h-l/json_001.jpg}

=== JSON Example | JSON 例

* JSON is just Javascript, in this case an anonymous object.
* JSONはただのJavascriptの無名オブジェクト

    {
     html: { 'element-id-1':
               'blob of <strong>HTML</strong>',
             'element-id-2':
               'another blob of <em>HTML</em>'
           }
    }

----

{image: http://www.lay-lo.com/graff/h-l/json_001.jpg}

=== JSON Example | JSON 例

* On the client side:
* クライアントサイドで：

.hilite
receive_update: function (transport) {
  var response;

  try { eval("response = " + transport.responseText) }
  catch (e) { alert(e + "\n" + transport.responseText) }

  for (elt_id in response.html) {
    var element = document.getElementById(elt_id);
    if (element) {
      element.innerHTML = response.html[elt_id];
    }
  }
}

+
  g+ 4
  g+ 5

+
  g+ 7
  g+ 8
  g+ 9
  g+ 10
  g+ 11
  g+ 12
.hilite

----

{image: http://www.urth.org/~autarch/jsan-ajax.png}

=== AJAX and JSAN

* |HTTP.Request|, cross-platform XHR library
* |HTTP.Request|, クロスプラットフォーム XmlHttpRequestライブラリ
* With XHR, you specify a function to be called when the response arrives
* サーバーからの返答が返ってきた時に実行する関数を指定できる
* The XHR object is passed to the callback
* 関数にXHRオブジェクトが渡される

----

{image: http://www.maztravel.com/perl/images/camel.jpg}

=== Perl Modules | Perlモジュール

* |JSON::Syck| - convert Perl data structures to JSON
* |JSON::Syck| - Perl構造体をJSONに変換
** Also |Data::JavaScript| and |Data::JavaScript::Anon|
* |JSAN::ServerSide| - JSAN dependency analyzer
* |JSAN::ServerSide| - JSAN依存関係を解析

----

{image: http://www.urth.org/~autarch/camel-ajax.jpg}

=== Perl and AJAX

* The Perl side is simple
* Perl側はシンプル
* Get a request for a URI
* あるURIにへのリクエストを送ってもらい
* Serve some sort of data in response
* データを返信する。
* Standard webapp behavior
* 普通のウェブアプリケーションの動作

----

=== Thank You | ありがとう

* Thanks to Daisuke Maki for translating
* Questions?

